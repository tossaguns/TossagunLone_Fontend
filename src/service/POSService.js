// POS Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ API calls ‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
class POSService {
  constructor() {
    this.baseURL = 'http://localhost:9999/HotelSleepGun';
  }

  // ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å localStorage
  getToken() {
    return localStorage.getItem('token');
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
  checkAuth() {
    const token = this.getToken();
    if (!token) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
    }
    return token;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async getPOSData() {
    try {
      console.log('üîÑ Fetching POS data...');
      
      const token = this.checkAuth();
      const response = await fetch(`${this.baseURL}/pos/`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('üì° Response status:', response.status);
      const result = await response.json();
      console.log('‚úÖ Response data:', result);

      if (!response.ok) {
        throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS');
      }

      return result.data;
    } catch (error) {
      console.error('‚ùå Error fetching POS data:', error);
      throw error;
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ POS
  async getPOSStatistics() {
    try {
      console.log('üîÑ Fetching POS statistics...');
      
      const token = this.checkAuth();
      const response = await fetch(`${this.baseURL}/pos/statistics`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('üì° Response status:', response.status);
      const result = await response.json();
      console.log('‚úÖ Response data:', result);

      if (!response.ok) {
        throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ POS');
      }

      return result.data;
    } catch (error) {
      console.error('‚ùå Error fetching POS statistics:', error);
      throw error;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á POS ‡πÉ‡∏´‡∏°‡πà
  async createPOS(posData) {
    try {
      console.log('üöÄ Creating POS...');
      console.log('üì¶ Request data:', posData);
      
      const token = this.checkAuth();
      const response = await fetch(`${this.baseURL}/pos/create`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(posData)
      });

      console.log('üì° Response status:', response.status);
      const result = await response.json();
      console.log('‚úÖ Response data:', result);

      if (!response.ok) {
        throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á POS');
      }

      return result.data;
    } catch (error) {
      console.error('‚ùå Error creating POS:', error);
      throw error;
    }
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• POS
  async updatePOS(posData) {
    try {
      console.log('üîÑ Updating POS...');
      console.log('üì¶ Request data:', posData);
      
      const token = this.checkAuth();
      const response = await fetch(`${this.baseURL}/pos/update`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(posData)
      });

      console.log('üì° Response status:', response.status);
      const result = await response.json();
      console.log('‚úÖ Response data:', result);

      if (!response.ok) {
        throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï POS');
      }

      return result.data;
    } catch (error) {
      console.error('‚ùå Error updating POS:', error);
      throw error;
    }
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ POS
  async updatePOSStatistics() {
    try {
      console.log('üîÑ Updating POS statistics...');
      
      const token = this.checkAuth();
      const response = await fetch(`${this.baseURL}/pos/statistics`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('üì° Response status:', response.status);
      const result = await response.json();
      console.log('‚úÖ Response data:', result);

      if (!response.ok) {
        throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ POS');
      }

      return result.data;
    } catch (error) {
      console.error('‚ùå Error updating POS statistics:', error);
      throw error;
    }
  }

  // ‡∏•‡∏ö POS
  async deletePOS() {
    try {
      console.log('üóëÔ∏è Deleting POS...');
      
      const token = this.checkAuth();
      const response = await fetch(`${this.baseURL}/pos/delete`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('üì° Response status:', response.status);
      const result = await response.json();
      console.log('‚úÖ Response data:', result);

      if (!response.ok) {
        throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö POS');
      }

      return result;
    } catch (error) {
      console.error('‚ùå Error deleting POS:', error);
      throw error;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà
  async createBuilding(buildingData) {
    try {
      console.log('üöÄ Creating building...');
      console.log('üì¶ Request data:', buildingData);
      
      const token = this.checkAuth();
      const response = await fetch(`${this.baseURL}/building/create`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(buildingData)
      });

      console.log('üì° Response status:', response.status);
      const result = await response.json();
      console.log('‚úÖ Response data:', result);

      if (!response.ok) {
        throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏∂‡∏Å');
      }

      return result.data;
    } catch (error) {
      console.error('‚ùå Error creating building:', error);
      throw error;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
  async createRoom(roomData) {
    try {
      console.log('üöÄ Creating room...');
      console.log('üì¶ Request data:', roomData);
      
      const token = this.checkAuth();
      const response = await fetch(`${this.baseURL}/room/create`, {
        method: 'POST',
        body: roomData, // FormData
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      console.log('üì° Response status:', response.status);
      const result = await response.json();
      console.log('‚úÖ Response data:', result);

      if (!response.ok) {
        throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á');
      }

      return result;
    } catch (error) {
      console.error('‚ùå Error creating room:', error);
      throw error;
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏Å‡πÉ‡∏´‡∏°‡πà
  async createTag(tagData) {
    try {
      console.log('üöÄ Creating tag...');
      console.log('üì¶ Request data:', tagData);
      
      const token = this.checkAuth();
      const response = await fetch(`${this.baseURL}/tag/create`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(tagData)
      });

      console.log('üì° Response status:', response.status);
      const result = await response.json();
      console.log('‚úÖ Response data:', result);

      if (!response.ok) {
        throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏Å');
      }

      return result;
    } catch (error) {
      console.error('‚ùå Error creating tag:', error);
      throw error;
    }
  }

  // ‡∏•‡∏ö‡πÅ‡∏ó‡πá‡∏Å
  async deleteTag(tagId) {
    try {
      console.log('üóëÔ∏è Deleting tag...');
      console.log('üì¶ Tag ID:', tagId);
      
      const token = this.checkAuth();
      const response = await fetch(`${this.baseURL}/tag/delete/${tagId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      console.log('üì° Response status:', response.status);
      const result = await response.json();
      console.log('‚úÖ Response data:', result);

      if (!response.ok) {
        throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÅ‡∏ó‡πá‡∏Å');
      }

      return result;
    } catch (error) {
      console.error('‚ùå Error deleting tag:', error);
      throw error;
    }
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
const posService = new POSService();

export default posService; 